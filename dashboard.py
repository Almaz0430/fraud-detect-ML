"""
Streamlit Dashboard –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è:
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª–∏
- –†—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
- –ê–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import requests
import json
import os
import sys
import joblib
from datetime import datetime
import warnings

warnings.filterwarnings('ignore')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

try:
    from app.inference import get_model, FraudDetectionModel
    from app.preprocess import DataPreprocessor
except ImportError:
    st.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö.")
    st.stop()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="AI Fraud Detection Dashboard",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .success-card {
        background-color: #d4edda;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #28a745;
    }
    .warning-card {
        background-color: #fff3cd;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #ffc107;
    }
    .danger-card {
        background-color: #f8d7da;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #dc3545;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown('<h1 class="main-header">üîç AI Fraud Detection Dashboard</h1>', unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é
@st.cache_resource
def load_fraud_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞."""
    try:
        model_dir = "model"
        if not os.path.exists(model_dir):
            return None, "–ü–∞–ø–∫–∞ model –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        model = get_model(model_dir)
        return model, None
    except Exception as e:
        return None, str(e)

@st.cache_data
def load_model_metrics():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª–∏."""
    try:
        metrics_path = os.path.join("model", "metrics.pkl")
        if os.path.exists(metrics_path):
            return joblib.load(metrics_path)
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫: {e}")
        return None

def check_api_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API."""
    try:
        response = requests.get("http://localhost:5000/health", timeout=5)
        return response.status_code == 200, response.json() if response.status_code == 200 else None
    except:
        return False, None

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.title("üéõÔ∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
model, model_error = load_fraud_model()
api_status, api_info = check_api_status()

# –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.sidebar.markdown("### üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")

if model is not None:
    st.sidebar.markdown('<div class="success-card">‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞</div>', unsafe_allow_html=True)
else:
    st.sidebar.markdown(f'<div class="danger-card">‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞<br><small>{model_error}</small></div>', unsafe_allow_html=True)

if api_status:
    st.sidebar.markdown('<div class="success-card">‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω</div>', unsafe_allow_html=True)
else:
    st.sidebar.markdown('<div class="warning-card">‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</div>', unsafe_allow_html=True)

# –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
page = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:",
    ["üìà –û–±–∑–æ—Ä –º–æ–¥–µ–ª–∏", "üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", "üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]
)

# –°—Ç—Ä–∞–Ω–∏—Ü–∞: –û–±–∑–æ—Ä –º–æ–¥–µ–ª–∏
if page == "üìà –û–±–∑–æ—Ä –º–æ–¥–µ–ª–∏":
    st.header("üìà –û–±–∑–æ—Ä –º–æ–¥–µ–ª–∏")
    
    if model is None:
        st.error("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø–∞–ø–∫–µ model/")
        st.info("–î–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: `jupyter notebook notebooks/train_model.ipynb`")
        st.stop()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
    model_info = model.get_model_info()
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
        <div class="metric-card">
            <h3>üéØ –¢–æ—á–Ω–æ—Å—Ç—å</h3>
            <h2>{model_info.get('accuracy', 'N/A'):.4f}</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="metric-card">
            <h3>üìä ROC-AUC</h3>
            <h2>{model_info.get('roc_auc', 'N/A'):.4f}</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="metric-card">
            <h3>üéØ Precision</h3>
            <h2>{model_info.get('precision', 'N/A'):.4f}</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown(f"""
        <div class="metric-card">
            <h3>üîç Recall</h3>
            <h2>{model_info.get('recall', 'N/A'):.4f}</h2>
        </div>
        """, unsafe_allow_html=True)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.subheader("üîß –î–µ—Ç–∞–ª–∏ –º–æ–¥–µ–ª–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.info(f"**–¢–∏–ø –º–æ–¥–µ–ª–∏:** {model_info.get('model_type', 'Unknown')}")
        st.info(f"**F1-Score:** {model_info.get('f1_score', 'N/A'):.4f}")
        
    with col2:
        st.info(f"**–î–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è:** {model_info.get('training_date', 'Unknown')}")
        st.info(f"**–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏:** {model_info.get('training_samples', 'N/A')}")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
elif page == "üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ":
    st.header("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞")
    
    if model is None:
        st.error("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        st.stop()
    
    st.markdown("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    with st.form("prediction_form"):
        st.subheader("üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        col1, col2, col3, col4 = st.columns(4)
        
        # V1-V7
        with col1:
            v1 = st.number_input("V1", value=0.0, format="%.6f")
            v2 = st.number_input("V2", value=0.0, format="%.6f")
            v3 = st.number_input("V3", value=0.0, format="%.6f")
            v4 = st.number_input("V4", value=0.0, format="%.6f")
            v5 = st.number_input("V5", value=0.0, format="%.6f")
            v6 = st.number_input("V6", value=0.0, format="%.6f")
            v7 = st.number_input("V7", value=0.0, format="%.6f")
        
        # V8-V14
        with col2:
            v8 = st.number_input("V8", value=0.0, format="%.6f")
            v9 = st.number_input("V9", value=0.0, format="%.6f")
            v10 = st.number_input("V10", value=0.0, format="%.6f")
            v11 = st.number_input("V11", value=0.0, format="%.6f")
            v12 = st.number_input("V12", value=0.0, format="%.6f")
            v13 = st.number_input("V13", value=0.0, format="%.6f")
            v14 = st.number_input("V14", value=0.0, format="%.6f")
        
        # V15-V21
        with col3:
            v15 = st.number_input("V15", value=0.0, format="%.6f")
            v16 = st.number_input("V16", value=0.0, format="%.6f")
            v17 = st.number_input("V17", value=0.0, format="%.6f")
            v18 = st.number_input("V18", value=0.0, format="%.6f")
            v19 = st.number_input("V19", value=0.0, format="%.6f")
            v20 = st.number_input("V20", value=0.0, format="%.6f")
            v21 = st.number_input("V21", value=0.0, format="%.6f")
        
        # V22-V28 + Amount
        with col4:
            v22 = st.number_input("V22", value=0.0, format="%.6f")
            v23 = st.number_input("V23", value=0.0, format="%.6f")
            v24 = st.number_input("V24", value=0.0, format="%.6f")
            v25 = st.number_input("V25", value=0.0, format="%.6f")
            v26 = st.number_input("V26", value=0.0, format="%.6f")
            v27 = st.number_input("V27", value=0.0, format="%.6f")
            v28 = st.number_input("V28", value=0.0, format="%.6f")
        
        # Amount –∏ threshold
        st.subheader("üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        col1, col2 = st.columns(2)
        
        with col1:
            amount = st.number_input("Amount (—Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)", value=100.0, min_value=0.0, format="%.2f")
        
        with col2:
            threshold = st.slider("–ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏", min_value=0.0, max_value=1.0, value=0.5, step=0.01)
        
        # –ö–Ω–æ–ø–∫–∏
        col1, col2, col3 = st.columns(3)
        
        with col1:
            submitted = st.form_submit_button("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å", type="primary")
        
        with col2:
            if st.form_submit_button("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–º–µ—Ä"):
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                st.experimental_rerun()
        
        with col3:
            if st.form_submit_button("üìã –ü—Ä–∏–º–µ—Ä –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞"):
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–º–µ—Ä –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                st.experimental_rerun()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    if submitted:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction_data = {
            "V1": v1, "V2": v2, "V3": v3, "V4": v4, "V5": v5, "V6": v6, "V7": v7,
            "V8": v8, "V9": v9, "V10": v10, "V11": v11, "V12": v12, "V13": v13, "V14": v14,
            "V15": v15, "V16": v16, "V17": v17, "V18": v18, "V19": v19, "V20": v20, "V21": v21,
            "V22": v22, "V23": v23, "V24": v24, "V25": v25, "V26": v26, "V27": v27, "V28": v28,
            "Amount": amount
        }
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            result = model.predict_detailed(transaction_data, threshold)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                fraud_score = result["fraud_score"]
                st.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞", f"{fraud_score:.4f}", f"{fraud_score*100:.2f}%")
            
            with col2:
                is_fraud = result["is_fraud"]
                fraud_text = "–ú–û–®–ï–ù–ù–ò–ß–ï–°–¢–í–û" if is_fraud else "–õ–ï–ì–ê–õ–¨–ù–ê–Ø"
                fraud_color = "danger" if is_fraud else "success"
                st.markdown(f'<div class="{fraud_color}-card"><h3>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {fraud_text}</h3></div>', unsafe_allow_html=True)
            
            with col3:
                confidence = result.get("confidence", "medium")
                risk_level = result.get("risk_level", "medium")
                st.info(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {confidence}")
                st.info(f"**–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:** {risk_level}")
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            fig = go.Figure(go.Indicator(
                mode = "gauge+number+delta",
                value = fraud_score,
                domain = {'x': [0, 1], 'y': [0, 1]},
                title = {'text': "Fraud Score"},
                delta = {'reference': threshold},
                gauge = {
                    'axis': {'range': [None, 1]},
                    'bar': {'color': "darkblue"},
                    'steps': [
                        {'range': [0, 0.3], 'color': "lightgreen"},
                        {'range': [0.3, 0.7], 'color': "yellow"},
                        {'range': [0.7, 1], 'color': "red"}
                    ],
                    'threshold': {
                        'line': {'color': "red", 'width': 4},
                        'thickness': 0.75,
                        'value': threshold
                    }
                }
            ))
            
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
elif page == "üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è":
    st.header("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = load_model_metrics()
    
    if metrics is None:
        st.warning("–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞.")
        st.stop()
    
    # ROC –∫—Ä–∏–≤–∞—è
    if 'roc_curve' in metrics:
        st.subheader("üìà ROC –∫—Ä–∏–≤–∞—è")
        
        fpr, tpr, _ = metrics['roc_curve']
        roc_auc = metrics.get('roc_auc', 0)
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=fpr, y=tpr,
            mode='lines',
            name=f'ROC –∫—Ä–∏–≤–∞—è (AUC = {roc_auc:.4f})',
            line=dict(color='blue', width=2)
        ))
        fig.add_trace(go.Scatter(
            x=[0, 1], y=[0, 1],
            mode='lines',
            name='–°–ª—É—á–∞–π–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä',
            line=dict(color='red', dash='dash')
        ))
        
        fig.update_layout(
            title='ROC –∫—Ä–∏–≤–∞—è',
            xaxis_title='False Positive Rate',
            yaxis_title='True Positive Rate',
            width=600, height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # Confusion Matrix
    if 'confusion_matrix' in metrics:
        st.subheader("üéØ Confusion Matrix")
        
        cm = metrics['confusion_matrix']
        
        fig = px.imshow(
            cm,
            labels=dict(x="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å", y="–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å", color="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
            x=['–ù–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ', '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ'],
            y=['–ù–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ', '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ'],
            color_continuous_scale='Blues',
            text_auto=True
        )
        
        fig.update_layout(title="Confusion Matrix")
        st.plotly_chart(fig, use_container_width=True)
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º
    if 'classification_report' in metrics:
        st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        
        report = metrics['classification_report']
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        df_metrics = pd.DataFrame(report).transpose()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞
        df_metrics = df_metrics.round(4)
        
        st.dataframe(df_metrics, use_container_width=True)

# –°—Ç—Ä–∞–Ω–∏—Ü–∞: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
elif page == "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API":
    st.header("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API")
    
    if not api_status:
        st.error("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: `python app/api.py`")
        st.stop()
    
    st.success("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω!")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API
    if api_info:
        st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API")
        st.json(api_info)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    st.subheader("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
    
    endpoint = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç:",
        ["/health", "/predict", "/model-info", "/sample-transaction"]
    )
    
    if endpoint == "/health":
        if st.button("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å /health"):
            try:
                response = requests.get("http://localhost:5000/health")
                st.success(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
                st.json(response.json())
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")
    
    elif endpoint == "/predict":
        st.markdown("**–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è**")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if st.button("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"):
            try:
                response = requests.get("http://localhost:5000/sample-transaction")
                if response.status_code == 200:
                    sample = response.json()["sample_transaction"]
                    st.session_state.sample_transaction = sample
                    st.success("–ü—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                    st.json(sample)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        if st.button("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ") and hasattr(st.session_state, 'sample_transaction'):
            try:
                response = requests.post(
                    "http://localhost:5000/predict",
                    json=st.session_state.sample_transaction
                )
                st.success(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
                st.json(response.json())
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")
    
    elif endpoint == "/model-info":
        if st.button("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å /model-info"):
            try:
                response = requests.get("http://localhost:5000/model-info")
                st.success(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
                st.json(response.json())
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")
    
    elif endpoint == "/sample-transaction":
        if st.button("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å /sample-transaction"):
            try:
                response = requests.get("http://localhost:5000/sample-transaction")
                st.success(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
                st.json(response.json())
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
elif page == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
    st.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
    
    st.markdown("""
    ## üéØ –û –ø—Ä–æ–µ–∫—Ç–µ
    
    –≠—Ç–æ MVP —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ 
    –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞.
    
    ## üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    
    - **–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ**: LightGBM / Logistic Regression
    - **API**: Flask REST API
    - **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è**: Streamlit Dashboard
    - **–î–∞–Ω–Ω—ã–µ**: Kaggle Credit Card Fraud Detection Dataset
    
    ## üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    
    - ‚úÖ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    - ‚úÖ REST API –¥–ª—è –æ–Ω–ª–∞–π–Ω –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    - ‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π dashboard
    - ‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª–∏
    - ‚úÖ –ü–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    - ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
    
    ## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
    
    1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: `pip install -r requirements.txt`
    2. –°–∫–∞—á–∞–π—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç: `kaggle datasets download -d mlg-ulb/creditcardfraud`
    3. –û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å: `jupyter notebook notebooks/train_model.ipynb`
    4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ API: `python app/api.py`
    5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ dashboard: `streamlit run dashboard.py`
    
    ## üìà –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    
    –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:
    - **ROC-AUC**: > 0.98
    - **Precision**: > 0.85
    - **Recall**: > 0.80
    - **F1-Score**: > 0.82
    """)
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.subheader("üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.info(f"**Python –≤–µ—Ä—Å–∏—è**: {sys.version}")
        st.info(f"**Streamlit –≤–µ—Ä—Å–∏—è**: {st.__version__}")
        
    with col2:
        st.info(f"**–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        st.info(f"**–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è**: {os.getcwd()}")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666;'>
        üîç AI Fraud Detection System | –í–µ—Ä—Å–∏—è 1.0.0 | 2024
    </div>
    """, 
    unsafe_allow_html=True
)